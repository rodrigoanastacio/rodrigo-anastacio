{"version":3,"sources":["webpack://easy-bank/./src/sass/style.scss","webpack://easy-bank/./src/sass/base/_scaffold.scss","webpack://easy-bank/./src/sass/base/_elements.scss","webpack://easy-bank/./src/sass/abstract/_unit.scss","webpack://easy-bank/./src/sass/base/_a11y.scss","webpack://easy-bank/./src/sass/base/_container.scss","webpack://easy-bank/./src/sass/layout/_l-header.scss","webpack://easy-bank/./src/sass/component/_c-logo.scss","webpack://easy-bank/./src/sass/component/_c-navbar.scss","webpack://easy-bank/./src/sass/component/_c-hero.scss","webpack://easy-bank/./src/sass/component/_c-contact-list.scss","webpack://easy-bank/./src/sass/component/_c-card.scss","webpack://easy-bank/./src/sass/theme/_t-dark.scss"],"names":[],"mappings":";AAQA,MAEI,uBAAyB,CAAzB,yBAAyB,CAAzB,uBAAyB,CAAzB,uBAAyB,CAIzB,2BAAyB,CAAzB,6BAAyB,CAIzB,wBAAyB,CAAzB,uBAAyB,CAAzB,wBAAyB,CAAzB,uBAAyB,CAAzB,yBAAyB,CAAzB,mBAAyB,CClB7B,iBAGI,qBAAsB,CACtB,YAAa,CACb,QAAS,CACT,SAAU,CAGd,UAEI,kCAAmC,CACnC,iCAAkC,CAClC,uCAAwC,CCb5C,KACE,qBAAsB,CAIxB,iBAGE,kBAAmB,CAIrB,qDACE,iBAGE,2CAAsC,CAAtC,mCAAsC,CACtC,6CAAuC,CAAvC,qCAAuC,CACvC,oCAAuC,CACxC,CAGH,8BAKE,WAAY,CACZ,cAAe,CAGjB,mBAGE,WAAY,CAGd,OACE,QAAS,CAGX,MACE,cAAe,CAGjB,QAEE,aAAc,CAOhB,KACE,6BAA+B,CAC/B,kBCOuD,CC9DzD,SACE,UAAW,CACX,aAAc,CACd,eAAgB,CAChB,iBAAkB,CAClB,QAAS,CACT,SAAU,CCPZ,WACE,YAAa,CACb,kBAAmB,CACnB,UAAW,CACX,WAAY,CACZ,kBF0DuD,CEzDvD,cAAe,CACf,aAAc,CCLhB,UACE,YAAa,CACb,qCAAsC,CACtC,0BAA2B,CAC3B,WHyDuD,CGvDvD,mBACE,YAAa,CACb,kBAAmB,CACnB,6BAA8B,CAC9B,UAAW,CACX,kBHkDqD,CGjDrD,cAAe,CACf,aAAc,CCblB,QACE,cJ4DuD,CI1DvD,cACE,eAAiB,CACjB,kBJwDqD,CIvDrD,eAAgB,CAChB,aAAc,CACd,oBAAqB,CALtB,mBAQG,eAAiB,CCXvB,UACE,YAAa,CACb,WAAY,CACZ,wBAAyB,CAH3B,wBAMI,YAAa,CACb,eAAgB,CAGlB,gBACE,qBLkDqD,CK/CvD,gBACE,aAAc,CACd,iBAAkB,CAClB,oBAAqB,CACrB,aAAc,CACd,eAAiB,CCrBrB,QACE,wBAAyB,CACzB,yBAA0B,CAC1B,uHAMC,CAED,iBACE,YAAa,CACb,sBAAuB,CACvB,UAAW,CAOb,uCAJI,kBN8CmD,CM1CvD,kBACE,UNyCqD,CO/DzD,gBACE,YAAa,CACb,eAAgB,CAEhB,sBACE,0BAA2B,CAC3B,aAAc,CACd,ePwDqD,COvDrD,qBPuDqD,CQ/DzD,QACE,qCAAsC,CACtC,yHAMC,CACD,0BRsDuD,CQrDvD,mCAAsC,CACtC,4CAA6C,CAC7C,qBRmDuD,CQjDvD,kBACE,iCAAqC,CACrC,0BAA2B,CAC3B,cR8CqD,CQ3CvD,sBACE,eAAgB,CAChB,0BAA2B,CCpB/B,QACE,qCAAsC,C","file":"css/main.css","sourcesContent":["@charset \"utf-8\";\n\n// Abstract\n@import 'abstract/unit';\n@import 'abstract/variables';\n@import 'abstract/breakpoint';\n@import 'abstract/z-index';\n\n:root {\n  @each $name, $color in $project-colors {\n    --color-#{$name}: #{$color};\n  }\n\n  @each $name, $color in $dpw-colors {\n    --color-#{$name}: #{$color};\n  }\n\n  @each $name, $color in $social-media-colors {\n    --color-#{$name}: #{$color};\n  }\n}\n\n// Vendor\n// @import \"vendor/normalize\";\n\n// Base\n@import 'base/scaffold';\n@import 'base/typography';\n@import 'base/elements';\n@import 'base/generics';\n@import 'base/a11y';\n@import 'base/container';\n\n// Layout\n@import 'layout/l-header';\n\n// Component\n@import 'component/c-logo';\n@import 'component/c-navbar';\n@import 'component/c-hero';\n@import 'component/c-contact-list';\n@import 'component/c-card';\n\n// State\n// @import \"state/is-\";\n\n// Page\n// @import \"page/\";\n\n// Theme\n@import 'theme/t-dark';\n\n// Shame (hacks & dishonorable stuff)\n","*,\n*:before,\n*:after {\n    box-sizing: border-box;\n    outline: none;\n    margin: 0;\n    padding: 0;\n}\n\nhtml,\nbody {\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-tap-highlight-color: transparent;\n}","html {\n  box-sizing: border-box;\n}\n\n// @see: https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\n// @see: https://css-tricks.com/revisiting-prefers-reduced-motion-the-reduced-motion-media-query/\n@media (prefers-reduced-motion: reduce), (update: slow) {\n  *,\n  ::before,\n  ::after {\n    animation-duration: 0.001ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.001ms !important;\n  }\n}\n\nimg,\niframe,\nobject,\nembed,\nvideo {\n  height: auto;\n  max-width: 100%;\n}\n\nobject,\nembed,\nvideo {\n  height: auto;\n}\n\nfigure {\n  margin: 0;\n}\n\nlabel {\n  cursor: pointer;\n}\n\nsup,\nsub {\n  font-size: 50%;\n}\n\n// ==========================================================================\n// Project specifics\n// ==========================================================================\n\nbody {\n  font-family: Nunito, sans-serif;\n  font-size: $global-font-size;\n}\n\n// ::selection {\n// }\n\n// ::-moz-selection {\n// }\n\n// input::placeholder {}\n// textarea::placeholder {}\n// input::-webkit-input-placeholder {}\n// textarea::-webkit-input-placeholder {}\n// input::-moz-placeholder {}\n// textarea::-moz-placeholder {}\n// input:-ms-input-placeholder {}\n// textarea:-ms-input-placeholder {}\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n////\n/// @group functions\n////\n\n// scss-lint:disable ZeroUnit\n\n/// Defines the base font size of the page, which is the value `1rem` is equal to.\n/// @type Number\n/// @group global\n$rem-base: 16px !default;\n\n/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.\n/// @param {Number} $num - Number to strip unit from.\n/// @returns {Number} The same number, sans unit.\n@function strip-unit($num) {\n  @return $num / ($num * 0 + 1);\n}\n\n/// Converts one or more pixel values into matching rem values.\n/// @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.\n/// @param {Number} $base [$rem-base] - The base value to use when calculating the `rem`. If you're using Foundation out of the box, this is 16px.\n/// @returns {List} A list of converted values.\n@function rem($values, $base: $rem-base) {\n  $rem-values: ();\n  $count: length($values);\n\n  @if $base == null {\n    $base: $rem-base;\n  }\n\n  @if $count == 1 {\n    @return -zf-to-rem($values, $base);\n  }\n\n  @for $i from 1 through $count {\n    $rem-values: append($rem-values, -zf-to-rem(nth($values, $i), $base));\n  }\n\n  @return $rem-values;\n}\n\n// Converts a unitless, pixel, or rem value to em, for use in breakpoints.\n@function -zf-bp-to-em($value) {\n  // Pixel and unitless values are converted to rems\n  @if unit($value) == 'px' or unit($value) == '' {\n    $value: rem($value);\n  }\n\n  // Then the value is converted to ems\n  @return strip-unit($value) * 1em;\n}\n\n/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$rem-base` variable.\n/// @param {Number} $value - Pixel value to convert.\n/// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.\n/// @access private\n@function -zf-to-rem($value, $base: $rem-base) {\n  // Calculate rem if units for $value is not rem\n  @if (unit($value) != 'rem') {\n    $value: strip-unit($value) / strip-unit($base) * 1rem;\n  }\n\n  // Turn 0rem into 0\n  /* stylelint-disable-next-line length-zero-no-unit */\n  @if ($value == 0) { $value: 0; }\n\n  @return $value;\n}\n","// @see https://webaim.org/techniques/css/invisiblecontent/#offscreen\n.sr-only {\n  height: 1px;\n  left: -10000px;\n  overflow: hidden;\n  position: absolute;\n  top: auto;\n  width: 1px;\n}\n",".container {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  max-width: $global-max-width;\n  padding: 0 15px;\n  margin: 0 auto;\n}\n","$layout-name: \"l-header\";\n\n.#{$layout-name} {\n  display: flex;\n  background-color: var(--color-black-2);\n  color: var(--color-primary);\n  height: rem(80);\n\n  &__content {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n    max-width: $global-max-width;\n    padding: 0 15px;\n    margin: 0 auto;\n  }\n}\n","$layout-name: \"c-logo\";\n\n.#{$layout-name} {\n  width: rem(300);\n\n  &__link {\n    padding: rem(8) 0;\n    font-size: rem(30);\n    font-weight: 100;\n    color: inherit;\n    text-decoration: none;\n\n    & > span {\n      font-weight: bold;\n    }\n  }\n}\n","$layout-name: \"c-navbar\";\n\n.#{$layout-name} {\n  display: flex;\n  flex-grow: 1;\n  justify-content: flex-end;\n\n  .c-navbar-nav {\n    display: flex;\n    list-style: none;\n  }\n\n  &__item {\n    margin-right: rem(5);\n  }\n\n  &__link {\n    display: block;\n    padding: 15px 30px;\n    text-decoration: none;\n    color: inherit;\n    font-weight: bold;\n  }\n}\n",".c-hero {\n  background-color: #78a5ba;\n  height: calc(100vh - 80px);\n  background: linear-gradient(\n    to right,\n    var(--color-black-1) 0%,\n    rgba(32, 32, 36, 0.5) 32%,\n    rgba(32, 32, 36, 0.5) 30%,\n    var(--color-black-2) 100%\n  );\n\n  &__box-img {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n\n    > img {\n      padding: 0 rem(15);\n    }\n  }\n\n  &__box-text {\n    width: 100%;\n    padding: 0 rem(15);\n  }\n}\n",".c-contact-list {\n  display: flex;\n  list-style: none;\n\n  &__link {\n    color: var(--color-primary);\n    display: block;\n    padding: rem(10);\n    margin-right: rem(15);\n  }\n}\n",".c-card {\n  background-color: var(--color-black-2);\n  background: linear-gradient(\n    to right,\n    var(--color-black-2) 0%,\n    rgba(32, 32, 36, 0.5) 25%,\n    rgba(32, 32, 36, 0.5) 50%,\n    var(--color-black-1) 100%\n  );\n  padding: rem(25) rem(50);\n  border: 1px solid rgba($color: #a8f80d, $alpha: 0);\n  border-left: 5px solid var(--color-secundary);\n  border-radius: rem(10);\n\n  &__headline {\n    font-family: 'Montserrat', sans-serif;\n    color: var(--color-primary);\n    font-size: rem(48);\n  }\n\n  &__sub-headline {\n    font-weight: 100;\n    color: var(--color-primary);\n  }\n}\n","$layout-name: \"t-dark\";\n\n.#{$layout-name} {\n  background-color: var(--color-black-1);\n}\n"],"sourceRoot":""}